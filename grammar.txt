# From n1570.pdf, with a syntax a bit more powerful
6.5.1 primary-expression:
  | identifier
  | constant
  | string-literal
  | "(" expression ")"
  | generic-selection
6.5.1.1 generic-selection:
  | "_Generic" "(" assignment-expression "," generic-assoc-list ")"
6.5.1.1 generic-assoc-list:
  | generic-association ( "," generic-association )*
6.5.2 postfix-expression:
  | primary-expression
  | postfix-expression "[" expression "]"
  | postfix-expression "(" argument-expression-list? ")"
  | postfix-expression "." identifier
  | postfix-expression "->" identifier
  | postfix-expression "++"
  | postfix-expression "--"
  | "(" type-name ")" "{" initializer-list ","? "}"
6.5.2 argument-expression-list:
  | assignment-expression ( "," assignment-expression )*
6.5.3 unary-expression:
  | postfix-expression
  | "++" unary-expression
  | "--" unary-expression
  | unary-operator cast-expression
  | "sizeof" unary-expression
  | "sizeof" "(" type-name ")"
  | "_Alignof" "(" type-name ")"
6.5.3 unary-operator:
  | "&"
  | "*"
  | "+"
  | "-"
  | "~"
  | "!"
6.5.4 cast-expression:
  | unary-expression
  | "(" type-name ")" cast-expression
6.5.5 multiplicative-expression:
  | cast-expression
  | multiplicative-expression "*" cast-expression
  | multiplicative-expression "/" cast-expression
  | multiplicative-expression "%" cast-expression
6.5.6 additive-expression:
  | multiplicative-expression
  | additive-expression "+" multiplicative-expression
  | additive-expression "-" multiplicative-expression
6.5.7 shift-expression:
  | additive-expression
  | shift-expression "<<" additive-expression
  | shift-expression ">>" additive-expression
6.5.8 relational-expression:
  | shift-expression
  | relational-expression "<" shift-expression
  | relational-expression ">" shift-expression
  | relational-expression "<=" shift-expression
  | relational-expression ">=" shift-expression
6.5.9 equality-expression:
  | relational-expression
  | equality-expression "==" relational-expression
  | equality-expression "!=" relational-expression
6.5.10 AND-expression:
  | equality-expression
  | AND-expression "&" equality-expression
6.5.11 exclusive-OR-expression:
  | AND-expression
  | exclusive-OR-expression "^" AND-expression
6.5.12 inclusive-OR-expression:
  | exclusive-OR-expression
  | inclusive-OR-expression "|" exclusive-OR-expression
6.5.13 logical-AND-expression:
  | inclusive-OR-expression
  | logical-AND-expression "&&" inclusive-OR-expression
6.5.14 logical-OR-expression:
  | logical-AND-expression
  | logical-OR-expression "||" logical-AND-expression
6.5.15 conditional-expression:
  | logical-OR-expression
  | logical-OR-expression "?" expression ":" conditional-expression
6.5.16 assignment-expression:
  | conditional-expression
  | unary-expression assignment-operator assignment-expression
6.5.16 assignment-operator:
  | "="
  | "*="
  | "/="
  | "%="
  | "+="
  | "-="
  | "<<="
  | ">>="
  | "&="
  | "^="
  | "|="
6.5.17 expression:
  | assignment-expression ( "," assignment-expression )*
6.6 constant-expression:
  | conditional-expression
6.7 declaration:
  | declaration-specifiers init-declarator-list? ";"
  | static_assert-declaration
6.7 declaration-specifiers:
  | storage-class-specifier declaration-specifiers?
  | type-specifier declaration-specifiers?
  | type-qualifier declaration-specifiers?
  | function-specifier declaration-specifiers?
  | alignment-specifier declaration-specifiers?
6.7 init-declarator-list:
  | init-declarator ( "," init-declarator )*
6.7 init-declarator:
  | declarator
  | declarator "=" initializer
6.7.1 storage-class-specifier:
  | "typedef"
  | "extern"
  | "static"
  | "_Thread_local"
  | "auto"
  | "register"
6.7.2 type-specifier:
  | "void"
  | "char"
  | "short"
  | "int"
  | "long"
  | "float"
  | "double"
  | "signed"
  | "unsigned"
  | "_Bool"
  | "_Complex"
  | atomic-type-specifier
  | struct-or-union-specifier
  | enum-specifier
  | typedef-name
6.7.2.1 struct-or-union-specifier:
  | struct-or-union identifier? "{" struct-declaration-list "}"
  | struct-or-union identifier
6.7.2.1 struct-or-union:
  | struct
  | union
6.7.2.1 struct-declaration-list:
  | struct-declaration+
6.7.2.1 struct-declaration:
  | specifier-qualifier-list struct-declarator-list? ";"
  | static_assert-declaration
6.7.2.1 specifier-qualifier-list:
  | ( type-specifier | type-qualifier ) specifier-qualifier-list?
6.7.2.1 struct-declarator-list:
  | struct-declarator ( "," struct-declarator )*
6.7.2.1 struct-declarator:
  | declarator
  | declarator? : constant-expression
6.7.2.2 enum-specifier:
  | "enum" identifier? "{" enumerator-list ","? "}"
  | "enum" identifier
6.7.2.2 enumerator-list:
  | enumerator ( "," enumerator )*
6.7.2.2 enumerator:
  | enumeration-constant
  | enumeration-constant "=" constant-expression
6.7.2.4 atomic-type-specifier:
  | "_Atomic" "(" type-name ")"
6.7.3 type-qualifier:
  | "const"
  | "restrict"
  | "volatile"
  | "_Atomic"
6.7.4 function-specifier:
  | "inline"
  | "_Noreturn"
6.7.5 alignment-specifier:
  | "_Alignas" "(" type-name ")"
  | "_Alignas" "(" constant-expression ")"
6.7.6 declarator:
  | pointer? direct-declarator
6.7.6 direct-declarator:
  | identifier
  | "(" declarator ")"
  | direct-declarator "[" type-qualifier-list? assignment-expression? ]
  | direct-declarator "[" "static" type-qualifier-list? assignment-expression "]"
  | direct-declarator "[" type-qualifier-list "static" assignment-expression "]"
  | direct-declarator "[" type-qualifier-list? "*" "]"
  | direct-declarator "(" parameter-type-list ")"
  | direct-declarator "(" identifier-list? ")"
6.7.6 pointer:
  | ( "*" type-qualifier-list? )+
6.7.6 type-qualifier-list:
  | type-qualifier+
6.7.6 parameter-type-list:
  | parameter-list ( "," "..." )?
6.7.6 parameter-list:
  | parameter-declaration ( "," parameter-declaration )*
6.7.6 parameter-declaration:
  | declaration-specifiers declarator
  | declaration-specifiers abstract-declarator?
6.7.6 identifier-list:
  | identifier ( "," identifier )*
6.7.7 type-name:
  | specifier-qualifier-list abstract-declarator?
6.7.7 abstract-declarator:
  | pointer
  | pointer? direct-abstract-declarator
6.7.7 direct-abstract-declarator:
  | "(" abstract-declarator ")"
  | direct-abstract-declarator? "[" type-qualifier-list? assignment-expression? "]"
  | direct-abstract-declarator? "[" "static" type-qualifier-list? assignment-expression "]"
  | direct-abstract-declarator? "[" type-qualifier-list "static" assignment-expression "]"
  | direct-abstract-declarator? "[" "*" "]"
  | direct-abstract-declarator? "(" parameter-type-list? ")"
6.7.8 typedef-name:
  | identifier
6.7.9 initializer:
  | assignment-expression
  | "{" initializer-list ","? "}"
6.7.9 initializer-list:
  | ( initializer-list "," )? designation? initializer
6.7.9 designation:
  | designator+ "="
6.7.9 designator:
  | "[" constant-expression "]"
  | "." identifier
6.7.10 static_assert-declaration:
  | "_Static_assert" "(" constant-expression "," string-literal ")" ";"
6.8 statement:
  | labeled-statement
  | compound-statement
  | expression-statement
  | selection-statement
  | iteration-statement
  | jump-statement
6.8.1 labeled-statement:
  | identifier ":" statement
  | "case" constant-expression ":" statement
  | "default" ":" statement
6.8.2 compound-statement:
  | "{" block-item* "}"
6.8.2 block-item:
  | declaration
  | statement
6.8.3 expression-statement:
  | expression? ";"
6.8.4 selection-statement:
  | "if" "(" expression ")" statement
  | "if" "(" expression ")" statement "else" statement
  | "switch" "(" expression ")" statement
6.8.5 iteration-statement:
  | "while" "(" expression ")" statement
  | "do" statement "while" "(" expression ")" ";"
  | "for" "(" expression? ";" expression? ";" expression? ")" statement
  | "for" "(" declaration expression? ";" expression? ")" statement
6.8.6 jump-statement:
  | "goto" identifier ";"
  | "continue" ";"
  | "break" ";"
  | "return" expression? ";"
6.9 translation-unit:
  | external-declaration+
6.9 external-declaration:
  | function-definition
  | declaration
6.9.1 function-definition:
  | declaration-specifiers declarator declaration* compound-statement
